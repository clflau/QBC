install.packages("adegenet")
install.packages(geiger)
install.packages(GEIGER)
"geiger"
install.packages(ape)
install.packages("GEIGER")
install.packages("geiger")
a <- 2+3
a
b <- a+a
a+a; a+b
discreteLogisticFun <- function(N0, Rd, KK, ttmax=10){
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- NN[tt]*(1+(Rd*(1-NN[tt]/KK)))
}
return(print(NN))
plot(1:(ttmax+1),NN, xlab="time", ylab="N", col="blue")
}
par(mfrow = c(2, 3))
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
#mini exercise 3.3.2
par(mfrow = c(2, 3))
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
par(mfrow = c(1, 1))
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
par(mfrow = c(2, 3))
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
par(mfrow = c(2, 3))
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 10, Rd = ii)
}
par(mfrow = c(2, 3))
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 1000, Rd = ii)
}
#mini exercise 3.3.2
par(mfrow = c(2, 3))
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
par(mfrow = c(2, 3))
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
par(mfrow = c(2, 3))
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
par(mfrow = c(2, 3))
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
par(mfrow = c(2, 3))
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, KK = 100, Rd = ii)
}
#mini exercise 3.3.2
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
par(mfrow = c(2, 3))
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, KK = 100, Rd = vecRd[ii])
}
#mini exercise 3.3.2
#make vector for each Rd value
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
par(mfrow = c(2, 3))
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:10){
discreteLogisticFun(N0 = 10, KK = 100, Rd = ii)
}
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
par(mfrow = c(2, 3))
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, KK = 100, Rd = ii)
}
discreteLogisticFun(N0=10, Rd=0.5, KK=100)
plot(1:10, sin(x))
plot(x= 1:10, y= sin(x))
plot(1:10, 1:10)
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
par(mfrow = c(2, 3))
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, KK = 100, Rd = ii)
}
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- NN[tt]*(1+(Rd*(1-NN[tt]/KK)))
}
return(print(NN))
plot(1:(ttmax),NN, xlab="time", ylab="N", col="blue")
}
discreteLogisticFun <- function(N0, Rd, KK, ttmax=10){
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- NN[tt]*(1+(Rd*(1-NN[tt]/KK)))
}
return(print(NN))
plot(1:(ttmax+1),NN, xlab="time", ylab="N", col="blue")
}
discreteLogisticFun(N0=10, Rd=0.5, KK=100)
par(mfrow(1, 1))
plot(1:10, 1:10)
plot(1:10, 1:10)
plot(1:10, 1:10)
discreteLogisticFun(N0=10, Rd=0.1, KK=100)
discreteLogisticFun(N0=10, Rd=0.9, KK=100)
discreteLogisticFun <- function(N0, Rd, KK, ttmax=10){
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- NN[tt]*(1+(Rd*(1-NN[tt]/KK)))
}
return(print(NN))
}
discreteLogisticFun(N0=10, Rd=0.5, KK=100)
discreteLogisticFun <- function(N0, Rd, KK, ttmax=10){
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- NN[tt]*(1+(Rd*(1-NN[tt]/KK)))
}
return(print(NN))
plot(1:(ttmax+1),NN, xlab="time", ylab="N", col="green")
}
discreteLogisticFun(N0=10, Rd=0.5, KK=100)
geometricGrowthFun <- function(N0, RR, ttmax=10){
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- RR*NN[tt]
}
print(NN)
plot(1:(ttmax+1),NN, xlab="time", ylab="N", col="blue")
}
geometricGrowthFun(N0 = 10, RR = 0.95)
rm(list = ls())
source("bootcamp_functions.R")
geometricGrowthFun(N0 = 200, RR = .5, ttmax = 20)
geometricGrowthFun(N0 = 10, RR = 0.95)
geometricGrowthFun <- function(N0, RR, ttmax=10){
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- RR*NN[tt]
}
print(NN)
plot(1:(ttmax+1),NN, xlab="time", ylab="N", col="blue")
}
geometricGrowthFun(N0 = 10, RR = 0.95)
rm(list = ls())
source("bootcamp_functions.R")
geometricGrowthFun(N0 = 200, RR = .5, ttmax = 20)
geometricGrowthFun <- function(N0, RR, ttmax=10){
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- RR*NN[tt]
}
print(NN)
plot(1:(ttmax+1),NN, xlab="time", ylab="N", col="blue")
}
geometricGrowthFun(N0 = 10, RR = 0.95)
rm(list = ls())
source("bootcamp_functions.R")
geometricGrowthFun(N0 = 200, RR = .5, ttmax = 20)
source("bootcamp_functions.R")
geometricGrowthFun(N0 = 200, RR = .5, ttmax = 20)
source("bootcamp_functions.R")
getwd()
setwd(C:/Users/Tharsis/Documents/Github)
setwd(~/Github/QBC)
getwd()
setwd("C:/Users/Tharsis/Documents/Github/QBC")
source("bootcamp_functions.R")
geometricGrowthFun(N0 = 200, RR = .5, ttmax = 20)
#discrete_logistic.R
discreteLogisticFun <- function(N0, Rd, KK, ttmax=10){
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- NN[tt]*(1+(Rd*(1-NN[tt]/KK)))
}
return(print(NN))
plot(1:(ttmax+1),NN, xlab="time", ylab="N", col="green")
}
discreteLogisticFun(N0=10, Rd=0.5, KK=100)
discreteLogisticFun(N0=10, Rd=0.9, KK=100)
#discrete_logistic.R
discreteLogisticFun <- function(N0, Rd, KK, ttmax=10){
#initialize variable to a vector of NA values
NN <- matrix(NA, nrow = 1, ncol = ttmax+1)
NN[1] <- N0
#use a loop to iterate the model the desired number of times
for(tt in 1:ttmax){
NN[tt+1] <- NN[tt]*(1+(Rd*(1-NN[tt]/KK)))
}
print(NN)
plot(1:(ttmax+1),NN, xlab="time", ylab="N", col="blue")
}
discreteLogisticFun(N0=10, Rd=0.5, KK=100)
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
par(mfrow = c(2, 3))
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
DD <- c(1:10)
DD
DD[4] -> 5
DD[4]*3
vectRd = c(-0.3, 0.3, 1.3, 1.9, 2.2, 2.7)
par(mfrow = c(2, 3))
#loop discreteLogisticFun over each element of vectRd
for (ii in 1:length(vectRd)){
discreteLogisticFun(N0 = 10, K = 100, Rd = ii)
}
